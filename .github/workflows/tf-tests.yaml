name: Test Terraform Modules

on:
  pull_request:
    paths:
      - "infra/terraform/modules/**"
    types:
      - opened
      - reopened
      - synchronize

env:
  MODULES_PATH: infra/terraform/modules

jobs:
  find-modules-to-test:
    name: Find Modules to Test
    runs-on: ubuntu-latest
    outputs:
      modules: ${{ steps.determine-modules.outputs.modules }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Determine modules to test
        id: determine-modules
        env:
          GH_TOKEN: ${{ github.token }}
        run: |
          # Get a list of files changed in the PR
          changed_files=$(gh pr diff --name-only ${{ github.event.pull_request.number }} | sort --unique)

          # Find all directories that contain a 'tests' sub-directory
          all_testable_modules=$(find ${{ env.MODULES_PATH }} -type d -name tests -exec dirname {} \; | sort --unique)

          # Filter for testable modules that were changed
          modules_to_test=()
          for module_path in $all_testable_modules; do
            # Check if any changed file path starts with the module's path
            if grep -q "^${module_path}/" <<< "$changed_files"; then
               modules_to_test+=("$module_path")
            fi
          done

          # Format as JSON array for use in the next job's matrix
          if [ ${#modules_to_test[@]} -eq 0 ]; then
            json_array="[]"
          else
            json_array=$(printf "%s\n" "${modules_to_test[@]}" | jq -R . | jq -s -c .)
          fi

          echo "Modules to be tested: ${json_array}"
          echo "modules=${json_array}" >> "$GITHUB_OUTPUT"

  run-tests:
    name: Test ${{ matrix.module }} (TF ${{ matrix.terraform-version }})
    needs: find-modules-to-test
    if: needs.find-modules-to-test.outputs.modules != '[]'
    runs-on: ubuntu-latest

    strategy:
      fail-fast: false
      matrix:
        module: ${{ fromJson(needs.find-modules-to-test.outputs.modules) }}
        terraform-version: ["1.12.1"]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ matrix.terraform-version }}

      - name: Terraform Init
        working-directory: ${{ matrix.module }}
        run: |
          echo "Initializing Terraform for module: ${{ matrix.module }}"
          terraform init

      - name: Terraform Test
        working-directory: ${{ matrix.module }}
        continue-on-error: true
        run: |
          echo "Running tests for module: ${{ matrix.module }}"
          terraform test
